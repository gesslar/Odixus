June 22, 2006:
`
    The improved emote command has now been completed. You can now use the
    '$' before a person's name who is in the room to use them in the emote.
    It will then print out specific messagse to the players being targeted,
    and to the room. You may also use possessive forms '$<person's name>
    <'|'s>' and it will print out possessive pronouns to players.


June 23rd, 2006

    - Began planning for the new soul daemon. The soul daemon will not
      come stocked with many different emotes already there. It will be
      a dynamic object that emtoes can be added to or removed from.


Jun 24th, 2006

    - Beta (and possibly even final edition of soul daemon as been
      completed. Here is a complete functoin listing and what each function
      does:

      *nomask varargs int request_emote(string emote, string who)*

      This function is called from the command hook in living objects. It
      is sent the emote the player is trying to use, and a target if there
      was any specified. First we make sure that the emote exists, and if
      not then we return out of it. Then we check for the target, if it
      is not in the room, then we exit out. Next check for if the target is
      living... if not, exit out. Finally, we pass the tests then we call
      do_emote. If there was a target, then we pass both the emote, and the
      target, if there was no target then we just pass the emote.

      *nomask varargs void do_emote(string emote, object target)*

      This function actually prints the emotes out to the player, room, and
      if any, target. First checking if the target is also the emoter. If
      so, we print out some silly message and exit out. Next we check if 
      whether there was  target or not. If there was no target, then we are
      going to print messages to the room and to the emoter. If there was a
      target then we are going to print messages to the emoter, room, and
      the target. For the messages, in order to format them correctly we
      pass them on to a function called build_emote.

      *nomask varargs string build_emote(string msg, object target)*

      This function is going to replace all of the placeholders that the
      emote has with the proper pronouns. $I is for the emoter, $PI is
      the possessive of the emoter, $SI is the subjective of the emoter,
      and $OI is the objective of the emoter. There are also the same 
      things for the target... just replace the 'I' with 'T'.

      *nomask void add_emote()

      This function is the beginning of the series that will allow an admin
      to add an emote to the system. It will be accessed thru some sort of
      command. When it is called we immediately go to the next function in
      the chain using input_to to get the name of the emote command. Next
      we call a function to get the message printed to a emoter if there
      was no target, then we get the message to print to the room if there
      is no target, then we get the message to print to the emoter if there
      was a target, then the message to print to the room if there was a
      taret, and lastly the message to print to the target. After all of
      this is completed, we print a confirmation and we use save_object to
      save the newly updated 'emotes' variable so that upon loading next
      time, we have all the emotes still intact.

      *nomask void remove_emote(string emote)

      This function removes the emote called 'emote' from the system. 
      Pretty self-explanitory.

      *nomask string *query_emotes()*

      This function returns the keys of the emotes variable. It is a string
      array of all the emotes available. Any emotes ending in "/t" are
      targeted emotes.


June 25th, 2006

    - Made 'significant' changes to the internal workings of add_emote()
      Before when this function was called we could do one of two things.
      It found out whehter you wanted a targeted emote or an untargeted
      emote, so if you wanted one emote that could both, be used alone AND
      with a target, then you had to run the program twice. Now you can do
      one of three... you can create a targetd, an untargeted OR both at
      the same time. This is actually a pretty complicated system, using 
      many input_to's and passing flags onto the input functions to tell
      it where at in the tree we are.

      Added the function:
      
      *nomask string *query_emote_messages(string emote)*

      This function will return a string array of the messages that get
      printed by a particular emote. The argument passed is the name of
      the emote. Since there can be two versions of an emote, if you wish
      to see the messages for the untargeted version you just send the 
      regular name of the emote. If you wish to see the targeted version,
      then append the string "/t" to the emote name... so the targeted
      version of emote "bow", would be turned to "bow/t". The returned
      array will either have 3 or 4 elements depending upon whether it is
      targeted or not. For untargeted emotes it will be of the form:

      ({ <msg to emoter>, <msg to room>, <def modifier> })

      and if it is a targeted emote, then the form will be:

      ({ <msg to emoter>, <msg to room>, <msg to target>, <def modifier> })

June 26th, 2006

    - Modified the get command, it now prints out the correct wording to
      the room. It used to say <player> get <item>, now it correctly says
      <player> gets <item>

    - Modified the inventory command so that when you look at yourself
      and you have only 1 inventory item, it now says 'You are carrying
      the following item:' versus saying 'You are carrying the following 1
      items:'

    - Look command modified. I modularized the color code that prints out
      the rooms items in colors. Also fixed a bug when looking at something
      that contained multiple worded id.

June 28th, 2006

    - Coded up an emotes command. This command allows the player to see
      what emotes are available to him/her. Emotes shown in green have both
      a targeted and untargeted version.

July 11th, 2006

    - Changed access.c command to make calls to the security_editor.c
      object versus doing all the work itself. Also added a lot of
      additional error checking to certain options to account for different
      types of input a user can give. Also added ansi to a couple menus.
      Reformatted some output to be more user-friendly

July 13th, 2006

    - Added some new pluralize rules into soul_d so that verbs printed
      out correctly. Also fixed an issue with $PI where it wouldnt print
      out 'your' to the person doing the emote.

July 14th, 2006

    - Began work on the lockdown command, client, and daemon. The lockdown
      command will allow you to access an admin tool to let the admin lock
      the mud to allow only admins, only devs and admins, or to play testers
      only, and it will also allowing the banning of users and ip addresses.

July 15th, 2006

    - Lockdown command completed. THe command clones the lockdown_client.c
      located in /obj/mudlib/lockdown_admin/, moves it to the user and then
      calls the main() func in it.

    - Began work on the lockdown daemon (lockdown_d.c located in
      /adm/daemons/) and lockdown_client.c.

      Menu system of the client has been completed and works fine.

      add_banned_user(string name) added to lockdown_d.c and seems to work.

      remove_banned_user(string name) added to lockdown_d.c and seems to
      work.

      query_banned_users() added to lockdown_d.c and seems to work.

      Lockdown client can now successfully add, remove and display banned
      usernames.

      remove_all_banned_users() added to lockdown_d.c and works.

      Lockdown client can now remove all user bans.

July 17th, 2006

    - Began work on login.c to integrate the lockdown daemon.
    
      Guest account can now be deactivated/activated.

      New player creation can now be disabled/enabled.

      Username bans now work.

      IP address bans now work.

      May now lock the mud for admins only, devs and above, or vip users.

      Custom messages can now be assigned and printed for each of the diff
      types of locks. Default ones will print if no custom one is found.

July 19th, 2006

    - Added ned environment vars of custom_clone/dest/move/teleport.
      Using set_env <var_name> <message> you can create custom messages
      to be printed out as you clone or dest an item, move using a standard
      exit, or teleport using the goto command. $N in all of these will
      be repalced with your name, while $O in the clone/dest messages will
      be replaced with the object name and $D in the move/teleport messages
      will be replaced with the direction or place you are going.

July 21st, 2006

    - lockdown daemon has been completed and is ready for bug testing. 
      Wildcard matches have been added for both username and ip address
      banning.

July 22nd, 2006

    - Changed the custom messages. They now use move_in, move_out,
      teleport_in, and teleport_out. Much cleaner, looks better.

    - Added a setplan command to allow overwriting/editing of a users plan

July 23rd, 2006

    - Moved the actual code that checks for if a username or ip address is
      banned from login.c to the lockdown_d daemon.

    - Added the -d option to setplan so that you could delete your plan.

July 24th, 2006

    - Began planning on the mailing system.

July 27th, 2006

    - Mailing system appears anyway to be coming along nicely. You can now
      successfuly send, read and delete messages.

July 28th, 2006

    - You can now forward mail, and you can mail to groups.
      
      Had to change the way the mail client accessed data. Found that if
      you were not admin it didnt have certain permissions to restore or
      save objects to the /data dir. All restore/save calls now take place
      in the mail daemon.

July 30th, 2006

    - You can now save messages from the mail system to files. Also you can
      now mark previously read messages as unread.

    - Scifi edited pager.c to allow for the use of an environmental var
      called morelines that allows you to set how many lines you want per
      cycle when paging.

July 31st, 2006

    - Changed it so that you can now mark as unread a range of messages in
      the mailer, you can also do the same with deleting and saving.

August 1st, 2006

    - Created a new environment var called biff. If this is set to off
      then players will not recieve new mail notifications.

    - Added the 'del all' option to the mailer to be able to delete all 
      messages in the in/outbox at once.

    - Added tricky's code to the chdmod_localNet.c file so that you can
      emote on the channels now by prepending your message with a ':'

      Added into the chdmod_localNet.c code that will save the history
      so that upon updates, you can still see the history.

August 3rd, 2006

    - Changed around chdmod_i3.c to use tricky's new services code.
      Edited tell.c to allow for telling to people on other muds.
      Edited who.c to allow for who requests on other muds.

August 6th, 2006

    - You can now use the /all for chatlines on localnet to show the full
      history versus just  the last 15 lines.

    - changed tell to allow for the 'tell . <message>' syntax. this allows
      you to send a message to the last person you tell'd

    - mail now properly sends to groups if there are groups within groups.

August 7th, 2006

    - You can now emote in tells using the syntax 'tell <user> :<message>'

August 8th, 2006

    - Added the e/edit option to the news client so you can now edit posts
      that you made on the news system.

August 9th, 2006

    - Added the l/list option to the news client to relist posts in the
      current group.

August 10th, 2006

    - You can now add permissions to the news group groups for users to be
      able to read, post (also counts as reply), and edit posts.

August 11th, 2006

    - You can emote in replies now.

    - Changed news client to clone security editor instead of using the
      master copy.

August 12th, 2006

    - Changed mail client to clone security editor instead of using the
      master copy.

August 15th, 2006

    - Added the afk command. tell.c, who.c, and mobile.c were changed
      to take advantage of the functionality.
      
August 16th, 2006

    - Fixed bug in mailing to groups.
    
      Mail client now pages long messages.
    
    - Changed pager to display either lines or percentage of file based
      upon the users page_display environment variable.
      
    - changed the /all option on chatlines to show the last 50 lines because
      trying to show all lines was just too much for the comptuer to handle
      :)
      
      You can now use the syntax <chan> /last <num> to get the last <num>
      lines to channel <chan>.
      
    - Created a new functions command to find what functoins exist
      in an object
      
August 17th, 2006

    - Mail client now prints out 20 messages at a time when showing the
      in/outbox.
      
August 22nd, 2006

    - Fixed a bug in the mail client that wouldn't allow you to reply to
      a mail.
      
August 25th, 2006

    - Modified Scifi's ls command to make it more pretty. Sorting and
      colors added.
     
August 27th, 2006

    - Fixed bug in ls.c that didnt print out items in a dir right.

August 28th, 2006

    - Fixed formatting bug in the ls command.

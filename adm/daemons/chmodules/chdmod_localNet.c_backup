//chdmod_localNet.c

//Tacitus @ LPUniversity
//30-SEPT-05
//Channel Daemon Module - Local Net

//Version 2.10

#include <mudlib.h>
#pragma save_binary


string *ch_list = ({"admin", "wiz", "dev", "gossip", "chat"});
mapping history = ([]);

void create()
{
     int i;
     
     CHAN_D->registerModule("localNet", file_name(this_object()));
     
     for(i = 0; i < sizeof(ch_list); i++)
     {
          CHAN_D->registerCh("localNet", ch_list[i]);
          history[ch_list[i]] = ({});
     }
               
}

int rec_msg(string chan, string usr, string msg)
{
     object ob;
     
     switch(msg) /* We could do some neat stuff here! */
     {
          case "/last" : {
               
               ob = find_player(usr);
               
               if(!sizeof(history[chan]))
                    tell_object(ob, "LocalNet: Channel " + chan + " has no history yet.\n");              
               else
                    tell_object(ob, implode(history[chan][(sizeof(history[chan]) - 15)..(sizeof(history[chan]) - 1)], ""));                              
               
               return 1;               
          }
     }
     
     switch(chan)
     {
          case "admin" : {
               CHAN_D->rec_msg(chan,  "[" + RED + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n");
	       history[chan] += ({ ctime(time()) + " [" + RED + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n" + NOR });
               return 1;
          }
          
          case "wiz" : {
               CHAN_D->rec_msg(chan, "[" + HIC + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n");
	       history[chan] += ({ ctime(time()) + " [" + HIC + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n" + NOR });
               return 1;
          }
          
          case "gossip" : { 
               CHAN_D->rec_msg(chan, "[" + HIG + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n");
               history[chan] += ({ ctime(time()) + " [" + HIG + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n" + NOR });
               return 1;
          }
          
          case "chat" : {
               CHAN_D->rec_msg(chan, "[" + HIB + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n");
	       history[chan] += ({ ctime(time()) + " [" + HIB + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n" + NOR });
               return 1;
               
          }
          
          case "dev" : {
               CHAN_D->rec_msg(chan, "[" + HIY + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n");
	       history[chan] += ({ ctime(time()) + " [" + HIY + capitalize(chan) + NOR + "] " + HIW + capitalize(usr) + NOR + ": " + msg + "\n" + NOR });
               return 1;
          }
     }
}

int isAllowed(string channel, string usr, int flag)
{
     if(channel == "admin" && !adminp(usr)) return 0;
     if(channel == "wiz" && !devp(usr)) return 0;
     if(channel == "dev" && !devp(usr)) return 0;
     return 1;
}
